#!/usr/bin/env python

import os
import sys
import json
import shutil
import argparse
import subprocess
from jinja2 import Environment, FileSystemLoader


platform_base = "./platforms"
all_dir = os.path.join(platform_base, "all")

platforms = ["bebop", "summit", "theta", "cori"]
tests = ["forces", "warpx"]


def get_requested_platforms_tests(platforms, tests):

    parser = argparse.ArgumentParser(description="Pass machine names and " + \
                                                 "test names for templating")

    for i in platforms + tests + ["all"]:
        parser.add_argument('--' + i, action='store_true')

    options = vars(parser.parse_args(sys.argv[1:]))
    assert any([options[i] for i in platforms]), \
        "No platform targets. Specify platform(s) (e.g., --theta --summit)"

    assert any([options[i] for i in tests + ["all"]]), \
        "No test targets. Specify test(s) (e.g., --forces --warpx) or --all"

    platforms = [i for i in platforms if options[i]]
    tests = [i for i in tests if options[i]]
    return platforms, tests


def prepare_jinja(templates):
    """ Setup jinja environment and get current templates folder"""
    file_loader = FileSystemLoader(templates)
    jinja_env = Environment(loader=file_loader, lstrip_blocks=True)

    return jinja_env


def make_out_platform_dir(platform, test, in_platform_dir):
    """ Make a top-level directory labeled by platform and test name. Stage in files."""
    out_platform_dir = platform + '_' + test.split('.')[0]
    if not os.path.isdir(out_platform_dir):
        shutil.copytree(os.path.join(all_dir, test, "stage"), out_platform_dir)
        in_platform_stage = os.path.join(in_platform_dir, test, "stage")
        for file in os.listdir(in_platform_stage):
            shutil.copy2(os.path.join(in_platform_stage, file),
                         os.path.join(out_platform_dir, file))

    return out_platform_dir


def make_test_dir(out_platform_dir, type):
    """ Make a lower-level directory labeled by test name"""
    out_test_dir = os.path.join(out_platform_dir, "test_" + type)
    os.makedirs(out_test_dir, exist_ok=True)

    return out_test_dir


def render(values, jinja_env):
    """ Render a template with passed values"""
    chosen_template = values.get("template")
    template = jinja_env.get_template(chosen_template)

    return template.render(values)


def run_prepare_scripts(out_platform_dir):
    os.chdir(out_platform_dir)
    for file in os.listdir('.'):
        if file.startswith('prepare'):
            subprocess.call(['./{}'.format(file)])
    os.chdir('..')


if __name__ == '__main__':

    with open("config.json") as f:
        config = json.load(f)

    platforms, tests = get_requested_platforms_tests(platforms, tests)

    for platform in platforms:
        in_platform_dir = os.path.join(platform_base, platform)
        jinja_env = prepare_jinja([in_platform_dir, all_dir])

        for test in tests:
            in_test_dir = os.path.join(in_platform_dir, test)
            out_platform_dir = make_out_platform_dir(platform, test, in_platform_dir)
            test_types = config[platform][test]

            with open(os.path.join(in_test_dir, "submit", "platform.json")) as p:
                platform_values = json.load(p)

            for type in test_types:
                out_test_dir = make_test_dir(out_platform_dir, type)

                with open(os.path.join(in_test_dir, "calling", type + '.json')) as f:
                    calling_values = json.load(f)

                with open(os.path.join(in_test_dir, "submit", type + '.json')) as f:
                    submit_values = json.load(f)

                single_test = {"test": calling_values['template']}
                submit_combined = {**single_test, **platform_values, **submit_values}

                with open(os.path.join(out_test_dir, calling_values['template']), "w") as f:
                    f.write(render(calling_values, jinja_env))

                with open(os.path.join(out_test_dir, 'submit_' + type + '.sh'), "w") as f:
                    f.write(render(submit_combined, jinja_env))

            run_prepare_scripts(out_platform_dir)
