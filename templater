#!/usr/bin/env python

import os
import sys
import json
import shutil
import argparse
import subprocess
from jinja2 import Environment, FileSystemLoader
from platforms_tests import platforms, tests

platform_base = "./platforms"
all_dir = os.path.join(platform_base, "all")

def get_requested_platforms_tests(platforms, tests):

    parser = argparse.ArgumentParser(description="Pass machine names and " + \
                                                 "test names for templating")

    for i in platforms + tests + ["all"]:
        parser.add_argument('--' + i, action='store_true')

    options = vars(parser.parse_args(sys.argv[1:]))
    assert any([options[i] for i in platforms]), \
        "No platform targets. Specify platform(s) (e.g., --theta --summit)"

    assert any([options[i] for i in tests + ["all"]]), \
        "No test targets. Specify test(s) (e.g., --forces --warpx) or --all"

    platforms = [i for i in platforms if options[i]]
    if not options["all"]:
        tests = [i for i in tests if options[i]]

    return platforms, tests


def prepare_jinja(templates):
    """ Setup jinja environment and get current templates folder"""
    file_loader = FileSystemLoader(templates)
    jinja_env = Environment(loader=file_loader, lstrip_blocks=True)

    return jinja_env


def get_test_variants(in_test_dir):
    return [f.split('.json')[0] for f in os.listdir(in_test_dir) if f.endswith('.json')]


def print_not_supported(test, platform, in_test_dir):
    print('\n{} isn\'t supported for {} since {} does not exist.' \
        .format(test, platform, in_test_dir))
    print('You can resolve this by creating the above directory with ' + \
          'configurations and optionally a stage directory.\n')


def make_out_platform_dir(platform, test, in_platform_dir):
    """ Make a top-level directory labeled by platform and test name. Stage in files."""
    out_platform_dir = platform + '_' + test.split('.')[0]
    if not os.path.isdir(out_platform_dir):
        shutil.copytree(os.path.join(all_dir, test, "stage"), out_platform_dir)
        in_platform_stage = os.path.join(in_platform_dir, test, "stage")
        if not os.path.isdir(in_platform_stage):
            return out_platform_dir
        for file in os.listdir(in_platform_stage):
            shutil.copy2(os.path.join(in_platform_stage, file),
                         os.path.join(out_platform_dir, file))

    print(out_platform_dir)
    return out_platform_dir


def get_config_values(in_test_dir, variant):
    with open(os.path.join(in_test_dir, variant + '.json')) as f:
        variant_config = json.load(f)

    return variant_config["calling"], variant_config["submit"]


def make_test_dir(out_platform_dir, variant):
    """ Make a lower-level directory labeled by test name"""
    out_test_dir = os.path.join(out_platform_dir, "test_" + variant)
    os.makedirs(out_test_dir, exist_ok=True)

    print('--' + out_test_dir.split('/')[-1])
    return out_test_dir


def render(values, jinja_env):
    """ Render a template with passed values"""
    chosen_template = values.get("template")
    template = jinja_env.get_template(chosen_template)

    return template.render(values)


def write_script(dir, name, values, jinja_env):
    with open(os.path.join(dir, name), "w") as f:
        f.write(render(values, jinja_env))


def run_prepare_scripts(out_platform_dir):
    os.chdir(out_platform_dir)
    for file in os.listdir('.'):
        if file.startswith('prepare'):
            subprocess.call(['./{}'.format(file)])
    os.chdir('..')


if __name__ == '__main__':

    req_platforms, req_tests = get_requested_platforms_tests(platforms, tests)

    for platform in req_platforms:
        in_platform_dir = os.path.join(platform_base, platform)
        jinja_env = prepare_jinja([in_platform_dir, all_dir])

        with open(os.path.join(in_platform_dir, "platform.json")) as p:
            platform_values = json.load(p)

        for test in req_tests:
            in_test_dir = os.path.join(in_platform_dir, test)

            try:
                test_variants = get_test_variants(in_test_dir)
            except FileNotFoundError:
                print_not_supported(test, platform, in_test_dir)
                raise

            out_platform_dir = make_out_platform_dir(platform, test, in_platform_dir)

            for variant in test_variants:  # differentiated by num_nodes, comms, etc.
                calling_values, submit_values = get_config_values(in_test_dir, variant)
                single_test = {"test": calling_values['template']}
                submit_values = {**single_test, **platform_values, **submit_values}

                out_test_dir = make_test_dir(out_platform_dir, variant)

                write_script(out_test_dir, calling_values['template'], calling_values, jinja_env)
                write_script(out_test_dir, 'submit_' + variant + '.sh', submit_values, jinja_env)

            run_prepare_scripts(out_platform_dir)
